Types of errors:

1) Syntax error
2) Logical Error
3) Runtime Error -> run time ke time code phat gaya

Exception Handling is a way to handle the runtime errors so that normal flow of the application can be maintained.
The jvm throws an object during runtime when an error occurs. This object is called an exception object.

--------------------------------------------

Types of default exceptions in java

Runtime Exceptions:

1) Arithmetic Exception -> divide by zero
2) Null Pointer Exception -> when we try to access the object which is not created. Example: String s = null; s.length();
3) Index Out of Bound Exception -> when we try to access the index which is not present in the array. Example: int[] arr = new int[5]; arr[6];
4) Illegal Argument Exception -> when we pass the wrong argument to the method. Example: Math.sqrt(-1);

IO Exceptions:

1) File Not Found Exception
2) EOF Exception

---------------------------------------------

Checked and Unchecked Exception

Checked Exception: The exceptions which are checked at compile time are called checked exceptions. Example: IOException, SQLException, etc.
These exceptions will not let you compile the code until you handle it.

Methods to handle:
1) use a try-catch block
2) use throws keyword -> isme jo method exception ka root hai, uske method definition ke samne hi throws keyword use karte hain. Ab jo is method ko call karega uski duty hai ki isko handle kare. Nahi to agar usko karna ka man nahi hai to usko bhi throws keyword use karna padega. Agar baat main tak pahuchi and main ne bhi throws keyword use kar diya to finally JVM ko handle karna padega aur runtime ke time exception dega.

Unchecked Exception: The exceptions which are not checked at compile time are called unchecked exceptions. Example: ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException, etc.

* We can use (throw new Exception();) to throw jabardasti ka exception if we want.

-----------------------------------------------


difference between checked and unchecked exception in java?
Reasoned for a few seconds
In Java, exceptions are divided into two primary categories based on how they are handled by the compiler:

Checked Exceptions
Compile-time checking: These exceptions are checked at compile time. The compiler forces you to handle them either by using a try-catch block or by declaring them in the method signature with the throws keyword.
Use case: They represent recoverable conditions that a reasonable application might want to catch and recover from, such as issues with file handling, network operations, or database connections.
Examples: IOException, FileNotFoundException, and SQLException.
Design Intent: Checked exceptions encourage developers to anticipate and manage exceptional conditions, promoting robust error handling in scenarios where recovery is possible.
Unchecked Exceptions
Runtime exceptions: These exceptions are not checked at compile time. This means you are not forced to handle them explicitly in your code.
Use case: They generally indicate programming errors that could have been prevented by proper code logic, such as logic errors or improper use of an API.
Examples: NullPointerException, ArrayIndexOutOfBoundsException, and ArithmeticException.
Design Intent: Unchecked exceptions are used for errors that typically occur due to bugs (e.g., dereferencing a null pointer) and thus are not expected to be caught and recovered from under normal circumstances.
Summary
Checked Exceptions: Must be explicitly handled or declared; they represent conditions that a program might recover from.
Unchecked Exceptions: Do not require explicit handling; they typically signal bugs or improper use of APIs that should be corrected in the code.
This distinction helps in designing APIs and error-handling strategies in Java, ensuring that developers are aware of which issues must be proactively managed versus those that indicate programming mistakes.


You said:
So unchecked exception can make our program terminate then and there?
Reasoned for a couple of seconds
Yes, an unchecked exception can cause your program to terminate if it isnâ€™t caught. Unchecked exceptions, such as those that derive from RuntimeException, are not enforced by the compiler to be caught or declared. If one of these exceptions occurs and is not handled by a try-catch block, it will propagate up the call stack and, if it reaches the top level of your application (like the main thread), it can cause the program to terminate abruptly.

That said, you can still catch unchecked exceptions if you want to provide a fallback or logging mechanism, but typically they indicate a programming error that should be fixed rather than just caught.



